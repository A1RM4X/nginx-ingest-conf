## Nginx Ingest server multi stream conf by A1RM4X
## Version 1.0

user www-data;
worker_processes 1;
pid /run/nginx.pid;
 include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 1024;
}

http {
	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

}

rtmp {
    server {
        listen 1935;
        chunk_size 8192;

## BUFFER SIZE, INCREASE LATENCY - NOT REQUIRED
##	buflen 3000ms;

	max_message 100M;
	max_streams 64;


##############################
#### Transcoding Part ########
##############################


## EXAMPLE 1 Live on YouTube & Twitch and recording locally

        application LiveYtTwRec {
                live on;
                record off;

                exec ffmpeg -y -i rtmp://localhost/$app/$name

## encoding settings from StreamFX guru Xaymar
## Best settings for me in term of quality
## you can modify them if required
## https://www.xaymar.com/guides/obs/high-quality-recording/nvenc/

## Stream to YouTube
## Encoded stream will also be recorded
## check below for the "application youtube-rec" for more details
## Also note how you can easily downscale or upscale via the command line -s 2560x1440
## change the resolution with your need to upscale / downscale

                        -c:v h264_nvenc -preset p7 -tune hq -multipass 0 -rc cbr -rc-lookahead 8
                        -s 2560x1440
# Specify GPU number if multiple GPU in ingest server
#                       -gpu 0
                        -no-scenecut 1 -b_adapt 1 -spatial-aq 1 -aq-strength 8 -temporal-aq 1 -b_ref_mode 2 -nonref_p 1 -zerolatency 0 -weighted_pred 0 -profile:v high
                        -b:v 50M -maxrate:v 50M -bufsize:v 50M -r:v 60 -g:v 120 -acodec copy
                        -f flv rtmp://localhost/youtube-rec

## Stream to twitch in 720p
                        -c:v h264_nvenc -preset p7 -tune hq -multipass 0 -rc cbr -rc-lookahead 8
                        -s 1280x720
#                       -gpu 0
                        -no-scenecut 1 -b_adapt 1 -spatial-aq 1 -aq-strength 8 -temporal-aq 1 -b_ref_mode 2 -nonref_p 1 -zerolatency 0 -weighted_pred 0 -profile:v high
                        -b:v 7M -maxrate:v 7M -bufsize:v 7M -r:v 60 -g:v 120 -acodec copy
                        -f flv rtmp://localhost/twitch;


                }

## EXAMPLE 2 Live on YouTube and recording locally
## You dont need to multistream, you can also do a "simple" stream

        application LiveYtRec {
                live on;
                record off;

                exec ffmpeg -y -i rtmp://localhost/$app/$name

## Stream to YouTube and record locally
                        -c:v h264_nvenc -preset p7 -tune hq -multipass 0 -rc cbr -rc-lookahead 8
                        -s 2560x1440
#                       -gpu 0
                        -no-scenecut 1 -b_adapt 1 -spatial-aq 1 -aq-strength 8 -temporal-aq 1 -b_ref_mode 2 -nonref_p 1 -zerolatency 0 -weighted_pred 0 -profile:v high
                        -b:v 50M -maxrate:v 50M -bufsize:v 50M -r:v 60 -g:v 120 -acodec copy
                        -f flv rtmp://localhost/youtube-rec;

                }

## EXAMPLE 3 just recording locally
## You don need to stream at all, you can also do a "simple" recording

        application LocalRec {
                live on;
                record off;

                exec ffmpeg -y -i rtmp://localhost/$app/$name

## Same settings as YouTube but recording locally
## good for shooting videos locally

                        -c:v h264_nvenc -preset p7 -tune hq -multipass 0 -rc cbr -rc-lookahead 8
                        -s 2560x1440
#                       -gpu 0
                        -no-scenecut 1 -b_adapt 1 -spatial-aq 1 -aq-strength 8 -temporal-aq 1 -b_ref_mode 2 -nonref_p 1 -zerolatency 0 -weighted_pred 0 -profile:v high
                        -b:v 50M -maxrate:v 50M -bufsize:v 50M -r:v 60 -g:v 120 -acodec copy
                        -f flv rtmp://localhost/testing-rec;

                }


## EXAMPLE 4 TESTING locally before going live
## Here I through whatever I have in mind while tinkering

        application TESTING {
                live on;
                record off;

                exec ffmpeg -y -i rtmp://localhost/$app/$name

## Stream to YouTube
			-vf scale=3840:2160
#			-vf scale=3840x2160:flag=lanczos
                        -c:v h264_nvenc -preset p5 -tune hq -multipass 0 -rc cbr -rc-lookahead 32
#			-filter:v scale_npp=w=3840:h=2160:interp_algo=lanczos
#			-s 3840Ã—2160
#                       -gpu 0
                        -no-scenecut 1 -b_adapt 1 -spatial-aq 1 -aq-strength 8 -temporal-aq 1 -b_ref_mode 2 -nonref_p 1 -zerolatency 0 -weighted_pred 0 -profile:v high
                        -b:v 50M -maxrate:v 50M -bufsize:v 50M -r:v 60 -g:v 120 -acodec copy
# you can record the output directly on the server ingest HDD
# really useful to test settings fast and save bandwith
#                        -f flv /mnt/QWERQWER/TESTING-STREAM.flv;
                        -f flv rtmp://localhost/youtube-4k;

## Stream TESTING for twitch
#                        -c:v h264_nvenc -preset p7 -tune hq -s 1664x936 -multipass 0 -rc cbr -rc-lookahead 8
#                        -s 1664x936
#                       -gpu 0
#                        -no-scenecut 1 -b_adapt 1 -spatial-aq 1 -aq-strength 8 -temporal-aq 1 -b_ref_mode 2 -nonref_p 1 -zerolatency 0 -weighted_pred 0 -profile:v high
#                        -b:v 8.2M -maxrate:v 8.2M -bufsize:v 8M -r:v 60 -g:v 120 -acodec copy
#                        -f flv /mnt/TO/UPDATE/QWERQWERQWER/TESTING-TW.flv;

                }



#############################################
#### Streaming / Multistreaming Part ########
#############################################



## This is the destination of the transcoding part
## dont touch the settings, not required

      application twitch {
                live on;
                record off;
                wait_key on;
                sync 10ms;

## Put your own twitch key below
                push rtmp://live.twitch.tv/app/live_QWEQWEQWEQWEQWEQWEQWEQWEQWEQWEQWEQWEWQEQW;

                }


      application twitchsmurf {
                live on;
                record off;
                wait_key on;
                sync 10ms;

                push rtmp://live.twitch.tv/app/live_QWEQWWQEQWEQWEQWEQWEQEQWEQWEQWEQWEWQEWQEW;

		}


       application youtube {
                live on;
                record off;
                wait_key on;
                sync 10ms;

                push rtmp://a.rtmp.youtube.com/live2/QWER-QWER-QWER-QWER;

                }


      application youtube-4k {
                live on;
                record off;
                wait_key on;
                sync 10ms;

		push rtmp://a.rtmp.youtube.com/live2/QWER-QWER-QWER-QWER;

                }


## For this one
## you also record locally the video stream on your hardrive
## please make sur your record_path is updated and valid
## I included a script that will transmux the recording from flv to mp4 at the end of the stream session (clean.sh)
## if you don want it just remove the line

       application youtube-rec {
                live on;
                record all;
                record_path /mnt/TO/UPDATE/QWERQWERQWER;
                record_suffix STREAM_%Y-%m-%d--%H-%M-%S.flv;
                record_unique off;
                wait_key on;
                sync 10ms;

## Script execution here (update path)
                exec_record_done bash /mnt/TO/UPDATE/QWERQWERQWER/clean.sh;

                push rtmp://a.rtmp.youtube.com/live2/QWER-QWER-QWER-QWER;

                }

## If you have multiple platforms which require the same bitrate / resolution
## you could end doing something like this

       application multistream-rec {
                live on;
                record all;
                record_path /mnt/TO/UPDATE/QWERQWERQWER;
                record_suffix STREAM_%Y-%m-%d--%H-%M-%S.flv;
                record_unique off;
                wait_key on;
                sync 10ms;

## Script execution here (update path)
                exec_record_done bash /mnt/TO/UPDATE/QWERQWERQWER/clean.sh;

## add all the destinations below
## you got the concept

                push rtmp://a.rtmp.youtube.com/live2/QWER-QWER-QWER-QWER;
		push rtmp://live.twitch.tv/BLAHBLHABLH-KEY-QWER-QWER-QWER-QWER;
                push rtmp://live.tiktok.tv/BLAHBLHABLH-KEY-QWER-QWER-QWER-QWER;
                push rtmp://live.twitter.tv/BLAHBLHABLH-KEY-QWER-QWER-QWER-QWER;

                }

	}
}
